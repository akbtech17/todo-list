{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","className","value","onChange","e","target","type","onClick","preventDefault","text","completed","id","Math","floor","random","name","Todo","todo","todo_id","map","el","filter","TodoList","filterTodos","key","App","useState","status","setFilterTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","localTodo","parse","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.04346868.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({inputText, setInputText, todos, setTodos, setStatus}) => {\r\n    //here i can write my js code\r\n    const inputTextHandler = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    }\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value);\r\n    }\r\n\r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault();\r\n        if(inputText !== \"\"){\r\n            setTodos([\r\n                ...todos,{text: inputText, completed: false, id:Math.floor((Math.random() * 100) + 1)}\r\n            ])\r\n            setInputText(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"container\">\r\n            <div>\r\n                <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n                <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n                    <i className=\"fas fa-plus-square\"></i>\r\n                </button>\r\n            </div>\r\n            \r\n            \r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Todo = ({text ,todo, todo_id, todos ,setTodos}) => {\r\n    //events\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter(el => el.id !== todo_id));\r\n    }\r\n    const completeHandler = () => {\r\n        setTodos(todos.map(el => {\r\n            if(el.id === todo_id){\r\n                return {...el, completed: !el.completed}\r\n            }\r\n            return el;\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" :\"\"}`}>{text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\"><i className=\"fas fa-check\"></i></button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\r\n//importing components\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos, setTodos, filterTodos }) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n            {\r\n                filterTodos.map(todo => (<Todo \r\n                    todo={todo} \r\n                    todo_id={todo.id} \r\n                    text={todo.text} \r\n                    key={todo.id} \r\n                    todos={todos} \r\n                    setTodos={setTodos}\r\n                />))\r\n            }   \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n//Importing Components\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status,setStatus] = useState(\"all\");\n  const [filterTodos, setFilterTodos] = useState([]);\n\n  //use effect\n  useEffect(() => {getLocalTodos()}, []);\n  useEffect(() => {filterHandler(); saveLocalTodos()},[todos, status]);\n\n\n  //function \n  const filterHandler = () => {\n    switch(status) {\n      case 'completed' : \n        setFilterTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted' :\n        setFilterTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default : \n        setFilterTodos(todos);\n        break;\n    }\n  }\n\n  //save to local\n  const saveLocalTodos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  const getLocalTodos = () => {\n    if(localStorage.getItem(\"todos\") === null){\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    }\n    else {\n      let localTodo = JSON.parse(localStorage.getItem(\"todos\"));\n      console.log(localTodo);\n      setTodos(localTodo);  \n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Anshul's Todo List</h1>\n      </header>\n      <Form \n        inputText={inputText} \n        setInputText={setInputText} \n        todos={todos} \n        setTodos={setTodos}\n        status={status}\n        setStatus={setStatus}\n      />\n      <TodoList \n        todos={todos} \n        setTodos={setTodos}\n        filterTodos={filterTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}